/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.baihe.searchrecommend.elasticsearch;

import com.baihe.searchrecommend.service.UpdateService;
import com.google.common.collect.Maps;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import io.searchbox.client.JestClient;
import io.searchbox.client.JestClientFactory;
import io.searchbox.client.config.HttpClientConfig;
import io.searchbox.core.Index;
import io.searchbox.core.Update;
import java.io.IOException;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author jasstion
 */
public class EsUpdateService implements UpdateService {

    final static ResourceBundle solrProperties = ResourceBundle.getBundle("elasticSearch");

    /**
     *
     */
    public static final Map<String, JestClient> esClientMap = Maps.newConcurrentMap();
    private JestClient client = null;

    private static void populateClient(String elasticSearchUrl) {
        JestClient client = esClientMap.get(elasticSearchUrl);
        if (client == null) {
            HttpClientConfig clientConfig = new HttpClientConfig.Builder(elasticSearchUrl).multiThreaded(true).build();
            JestClientFactory factory = new JestClientFactory();
            factory.setHttpClientConfig(clientConfig);
            client = factory.getObject();
            esClientMap.put(elasticSearchUrl, client);
        }

    }

    /**
     *
     */
    public EsUpdateService() {
        String elasticSearchUrl = solrProperties.getString("elasticSearchUrl");
        client = esClientMap.get(elasticSearchUrl);
        if (client == null) {
            populateClient(elasticSearchUrl);
            client = esClientMap.get(elasticSearchUrl);

        }

    }

    private void checkParameters(Map<String, String> updateMap) {
        String id = (String) updateMap.get("id");
        String type = updateMap.get("type");
        String index = updateMap.get("index");
        if (id == null || type == null || index == null) {
            throw new IllegalArgumentException("updated Info must contains id, type, index field infomation!");
        }

    }

    /**
     *
     * @param updateMap
     * should make sure the updatedMap contains id field, and also type and index
     */
    @Override
    public void update(Map<String, String> updateMap) {
        checkParameters(updateMap);
        String id = (String) updateMap.get("id");
        String type = updateMap.get("type");
        String index = updateMap.get("index");
        String updateScript = generateEsUpdateScriptFromMap(updateMap);
        Update update = new Update.Builder(updateScript).index(index).type(type).id(id).build();
        try {
            client.execute(update);
        } catch (IOException ex) {
            Logger.getLogger(EsUpdateService.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     *
     * @param updateMap
     */
    @Override
    public void add(Map<String, String> updateMap) {
        checkParameters(updateMap);
        String id = (String) updateMap.get("id");
        String type = updateMap.get("type");
        String index = updateMap.get("index");

        updateMap.remove("id");
        updateMap.remove("index");
        updateMap.remove("type");
        Index indexAction = new Index.Builder(updateMap).index(index).type(type).id(id).build();
        try {
            client.execute(indexAction);
        } catch (IOException ex) {
            Logger.getLogger(EsUpdateService.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     *
     * @param updateMap
     */
    @Override
    public void delete(Map<String, String> updateMap) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     *
     * @param updatesMap
     * @return
     */
    protected static String generateEsUpdateScriptFromMap(Map<String, String> updatesMap) {
        String id = updatesMap.get("id");
        JsonObject upsertObj = new JsonObject();
        upsertObj.addProperty("id", id);
        updatesMap.remove("id");
        updatesMap.remove("index");
        updatesMap.remove("type");
        JsonObject jsonObj = new JsonObject();
        StringBuffer scriptBuffer = new StringBuffer();
        JsonObject jsonObject_1 = new JsonObject();
        for (Map.Entry<String, String> entrySet : updatesMap.entrySet()) {
            String key = entrySet.getKey();
            String value = entrySet.getValue();
            scriptBuffer.append("ctx._source.").append(key).append("=" + key + ";");
            jsonObject_1.addProperty(key, value);

        }
        jsonObj.addProperty("script", scriptBuffer.toString());

        jsonObj.add("params", jsonObject_1);
        //add upsert script
        //if document no existed, then create document by id given
        jsonObj.add("upsert", upsertObj);
        return new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create().toJson(jsonObj);

    }

}
