/**
 *
 */
package com.baihe.searchrecommend.solr;

import com.baihe.searchrecommend.utils.ReadProperties;
import java.util.ResourceBundle;
import org.apache.http.client.HttpClient;
import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.impl.CloudSolrServer;
import org.apache.solr.client.solrj.impl.HttpClientUtil;
import org.apache.solr.client.solrj.impl.LBHttpSolrServer;
import org.apache.solr.common.params.ModifiableSolrParams;

/**
 * @author crazyicele
 * @updated zhaoyf
 *
 */
@Deprecated
public class CloudSolr {

    private static ResourceBundle solrResourceBundle = ResourceBundle.getBundle("solr");
    private static Logger logger = Logger.getLogger(CloudSolr.class);
    private static String zkHost = solrResourceBundle.getString("solrcloud.zkHost");
    private static int max_connections = Integer.parseInt(solrResourceBundle.getString("solrcloud.max_connections"));
    private static int max_connections_per_host = Integer.parseInt(solrResourceBundle.getString("solrcloud.max_connections_per_host"));
    private static int zkConnectTimeout = Integer.parseInt(solrResourceBundle.getString("solrcloud.zkConnectTimeout"));
    private static int zkClientTimeout = Integer.parseInt(solrResourceBundle.getString("solrcloud.zkClientTimeout"));
    private static String manCollection = "baiheSearch_man";
    private static String womanCollection = "baiheSearch_woman";
    private static CloudSolrServer manSolrServer;
    private static CloudSolrServer womanSolrServer;

    public static synchronized CloudSolrServer getManInstance() {
        if (manSolrServer == null) {
            try {
                ModifiableSolrParams params = new ModifiableSolrParams();
                params.set(HttpClientUtil.PROP_MAX_CONNECTIONS, max_connections);
                params.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, max_connections_per_host);
                HttpClient client = HttpClientUtil.createClient(params);
                LBHttpSolrServer lbServer = new LBHttpSolrServer(client);
                manSolrServer = new CloudSolrServer(zkHost, lbServer);
                manSolrServer.setZkConnectTimeout(zkConnectTimeout);
                manSolrServer.setZkClientTimeout(zkClientTimeout);
                manSolrServer.setDefaultCollection(manCollection);
                logger.info("初始化manSolrServer成功！");
            } catch (Exception e) {
                logger.error("初始化manSolrServer失败");

            }
        }
        return manSolrServer;
    }

    public static synchronized CloudSolrServer getWomanInstance() {
        if (womanSolrServer == null) {
            try {
                ModifiableSolrParams params = new ModifiableSolrParams();
                params.set(HttpClientUtil.PROP_MAX_CONNECTIONS, max_connections);
                params.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, max_connections_per_host);
                HttpClient client = HttpClientUtil.createClient(params);
                LBHttpSolrServer lbServer = new LBHttpSolrServer(client);
                womanSolrServer = new CloudSolrServer(zkHost, lbServer);
                womanSolrServer.setZkConnectTimeout(zkConnectTimeout);
                womanSolrServer.setZkClientTimeout(zkClientTimeout);
                womanSolrServer.setDefaultCollection(womanCollection);
                logger.info("初始化womanSolrServer成功！");
            } catch (Exception e) {
                logger.error("初始化womanSolrServer失败");
            }
        }
        return womanSolrServer;
    }
}
