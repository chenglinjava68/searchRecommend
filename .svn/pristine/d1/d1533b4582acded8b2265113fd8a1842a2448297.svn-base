package com.baihe.searchrecommend.service.impl;

import com.baihe.basedSearch.entity.BaiheQuery;
import com.baihe.basedSearch.entity.QueryItem;
import com.baihe.searchrecommend.entity.RecommendAppRule;
import com.baihe.searchrecommend.service.IRecommend;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.springframework.data.redis.core.ZSetOperations;

import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Created by jasstion on 15/6/30.
 */
public class SimilarUsersRecommender extends BaseRecommender implements IRecommend<String, Object> {

    /**
     *
     */
    public final static String appKey = "a3da5d51b07251258cc2ac5a61b2da93";

    private final static String REDIS_PREFIX = "bhdp-sim:";

    /**
     *
     */
    public SimilarUsersRecommender() {
        super();
        this.userRelationSign = "recommend_simility_user";
    }

    /**
     *
     * @param paras
     * @return
     */
    @Override
    public Map<String, Object> recommend(Map<String, String> paras) {
        RecommendAppRule appRule = this.getAppRule(appKey);

        Map<String, Object> resultMap = Maps.newHashMap();
        String profileUserId = paras.get("profileUserId");
        String visitUserId = paras.get("visitUserId");
        int count = Integer.parseInt(paras.get("count"));
        Map<String, String> profileUserInfo = getUserInfoByUserId(profileUserId);
        String ageStr = profileUserInfo.get("age");
        String cityStr = profileUserInfo.get("city");
        String countryStr = profileUserInfo.get("country");
        String districtStr = profileUserInfo.get("district");
        String provinceStr = profileUserInfo.get("province");
        String heightStr = profileUserInfo.get("height");
        int age = -1;
        int city = -1;
        int country = -1;
        int province = -1;
        int district = -1;
        int height = -1;
        if (ageStr != null && ageStr.trim().length() > 0) {
            age = Integer.parseInt(ageStr);
        }
        if (cityStr != null && cityStr.trim().length() > 0) {
            city = Integer.parseInt(cityStr);
        }
        if (countryStr != null && countryStr.trim().length() > 0) {
            country = Integer.parseInt(countryStr);
        }

        if (provinceStr != null && provinceStr.trim().length() > 0) {
            province = Integer.parseInt(provinceStr);
        }
        if (districtStr != null && districtStr.trim().length() > 0) {
            district = Integer.parseInt(districtStr);
        }
        if (heightStr != null && heightStr.trim().length() > 0) {
            height = Integer.parseInt(heightStr);
        }
        String genderStr = profileUserInfo.get("gender");
        if (genderStr == null || genderStr.trim().length() < 1) {
            throw new RuntimeException("userId:" + profileUserId + " has no gender value!");
        }
        int gender = Integer.parseInt(genderStr);
        String k = REDIS_PREFIX + profileUserId;

        List<String> userIdsList = Lists.newArrayList();
        try {
            Set<ZSetOperations.TypedTuple<Set>> result = redisTemplate.opsForZSet().reverseRangeWithScores(k, 0, -1);
            for (ZSetOperations.TypedTuple tu : result) {
                userIdsList.add((String) tu.getValue());

            }

        } catch (Exception e) {
            LOGGER.warn("访问 Redis 服务器出现异常，" + e.getMessage() + "");
        }

        LOGGER.info("Similirity Users Count From Redis for user:" + profileUserId + ": " + userIdsList.size());

        LOGGER.debug("Similirity Users From Redis for user:" + profileUserId + ": " + userIdsList.toString());

        int left = count - userIdsList.size();
        List<String> userIds_solr = Lists.newArrayList();
        int agespace = 5, heightspace = 10;
        boolean ingoreAge = false;
        boolean ingoreHeight = false;
        if (age == -1) {
            ingoreAge = true;
        }
        if (height == -1) {
            ingoreHeight = true;
        }
        int hage = age + agespace;
        int lage = age - agespace;
        int hheight = height + heightspace;
        int lheight = height - heightspace;

        try {
            BaiheQuery query = new BaiheQuery();
            List<QueryItem> queryItems = Lists.newArrayList();
            query.setQueryItems(queryItems);
            query.setPageNum(1);
            query.setPageSize(count + 2);
            query.setFls(Lists.newArrayList("userID"));
            query.setGender(gender);
            if (district > 0) {

                QueryItem queryItem = new QueryItem("district", Lists.newArrayList(String.valueOf(district)));
                queryItems.add(queryItem);

            } else {
                if (city > 0) {

                    QueryItem queryItem = new QueryItem("city", Lists.newArrayList(String.valueOf(city)));
                    queryItems.add(queryItem);

                } else {
                    if (province > 0) {

                        QueryItem queryItem = new QueryItem("province", Lists.newArrayList(String.valueOf(province)));
                        queryItems.add(queryItem);

                    }
                }
            }

            if (!ingoreAge) {
                String ageRange = lage + "#TO#" + hage;

                QueryItem ageQueryItem = new QueryItem("age", Lists.newArrayList(ageRange));
                queryItems.add(ageQueryItem);

            }
            if (!ingoreHeight) {
                String heightRange = lheight + "#TO#" + hheight;

                QueryItem heightQueryItem = new QueryItem("height", Lists.newArrayList(heightRange));
                queryItems.add(heightQueryItem);
            }

            //   query = BaiheQueryHelper.makeBaiheQuery(query, appKey);
            query = this.makeBaiheQuery(query, appRule);

            LOGGER.debug(query.toString());
            LOGGER.info("final generated query for user: " + visitUserId + " is: " + query.toString());

            List<Map<String, Object>> finalQueryResults = queryService.processQuery(query);
            for (Map<String, Object> map : finalQueryResults) {
                String userID = String.valueOf(map.get("userID"));
                if (userID == null) {
                    continue;
                }
                userID = userID.replace(".", "").replaceAll("E[\\d]{0,}", "");
                userIds_solr.add(userID);
            }
        } catch (Exception e) {
            LOGGER.warn("query solr errors,  异常信息是：" + e.getMessage() + "");

        }
        if (left < 0) {
            userIdsList = userIdsList.subList(0, count - 1);
        }

        //remove duplicate
        for (String userId : userIds_solr) {
            if (!userIdsList.contains(userId) && !userId.equals(profileUserId) && !userId.equals(visitUserId)) {
                userIdsList.add(userId);
            }
            if (userIdsList.size() == count) {
                break;

            }
        }
        this.processRecommendUsersRelations(appRule, visitUserId, userIdsList);
        this.duplicateRecommendUsersFromUserRelations(appRule, userIdsList, visitUserId);
        resultMap.put("similarUserIds", userIdsList);

        return resultMap;
    }

    /**
     *
     * @param appKey
     */
    @Override
    public void clearAppRuleCache(String appKey) {
        this.clearAppRuleCache(appKey);
    }

}
