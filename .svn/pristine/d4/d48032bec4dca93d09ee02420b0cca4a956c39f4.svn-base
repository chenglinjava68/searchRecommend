/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.baihe.searchrecommend.elasticsearch;

import com.baihe.searchrecommend.entity.EsBaiheQuery;
import com.baihe.searchrecommend.service.AbstractQueryService;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.searchbox.client.JestClient;
import io.searchbox.client.JestClientFactory;
import io.searchbox.client.JestResult;
import io.searchbox.client.config.HttpClientConfig;
import io.searchbox.core.Search;
import org.apache.commons.lang.time.StopWatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Set;

/**
 *
 * @author jasstion
 */
public class EsQueryService extends AbstractQueryService<EsBaiheQuery> {

    private static JestClient jestClient = null;
    final static ResourceBundle solrProperties = ResourceBundle.getBundle("elasticSearch");


    static {
         instanceJestClient();
    }

    private static void instanceJestClient() {
        String elasticSearchUrl = solrProperties.getString("elasticSearchUrl");

        if (jestClient == null) {
            Set<String> servers = Sets.newHashSet();
            String[] servers_str = elasticSearchUrl.split(",");
            for (String server_str : servers_str) {
                servers.add(server_str);
            }


            HttpClientConfig clientConfig = new HttpClientConfig.Builder(servers).multiThreaded(true).build();

            JestClientFactory factory = new JestClientFactory();
            factory.setHttpClientConfig(clientConfig);
            jestClient = factory.getObject();

        }
    }
    protected final static Logger LOGGER = LoggerFactory.getLogger(EsQueryService.class);

    @Override
    public List<Map<String, Object>> processQuery(EsBaiheQuery baiheQuery) throws Exception {
        long timeTaken = 0;
        boolean cacheHit = false;
        List<Map<String, Object>> queryResult = null;
        StopWatch stopWatch = new StopWatch();

        // Start the watch, do some task and stop the watch.
        stopWatch.start();

        queryResult = this.queryCache(baiheQuery);
        if (queryResult != null && queryResult.size() > 1) {
            cacheHit = true;
            AbstractQueryService.QueryStatistics queryStatistics = new QueryStatistics(timeTaken, cacheHit);
            stopWatch.stop();
            timeTaken = stopWatch.getTime();
            this.recordQueryLog(queryStatistics);
            return queryResult;
        }
        cacheHit = false;
        queryResult = this.query(baiheQuery);
        stopWatch.stop();
        timeTaken = stopWatch.getTime();

        AbstractQueryService.QueryStatistics queryStatistics = new QueryStatistics(timeTaken, cacheHit);
        this.recordQueryLog(queryStatistics);
        this.cacheQueryResult(baiheQuery, queryResult);

        return queryResult;
    }

    @Override
    public List<Map<String, Object>> query(EsBaiheQuery baiheQuery) throws Exception {
        List<Map<String, Object>> results = Lists.newArrayList();
        Search search = new EsQueryGenerator().generateFinalQuery(baiheQuery);
        JestResult result = jestClient.execute(search);
        String error = result.getErrorMessage();
        if (error != null) {
            throw new RuntimeException(error);
        }
        JsonObject obj = result.getJsonObject();

        LOGGER.debug(obj.toString());
        JsonArray jsonArray = ((JsonObject) result.getJsonObject().get("hits")).getAsJsonArray("hits");
        for (JsonElement jsonObj : jsonArray) {
            Map<String, Object> value = Maps.newHashMap();

            for (String field : baiheQuery.getFls()) {
                try {
                    JsonElement tmpObj = ((JsonObject) ((JsonObject) jsonObj).get("_source")).get(field);
                    if (tmpObj == null) {
                        continue;
                    }
                    String tmpName = tmpObj.getAsString();

                    value.put(field, tmpName);
                } catch (Exception e) {
                    LOGGER.debug(e.getMessage());
                }

            }
            results.add(value);

        }

        return results;

    }

}
