package com.baihe.searchrecommend.service.impl;

import com.baihe.basedSearch.entity.BaiheQuery;
import com.baihe.basedSearch.entity.QueryItem;
import com.baihe.searchrecommend.entity.RecommendAppRule;
import com.baihe.searchrecommend.service.IRecommend;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.springframework.data.redis.core.ZSetOperations;

import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Created by chengyu on 2015/12/25.
 */
public class QianXianUsersRecommender extends BaseRecommender implements IRecommend<String, Object> {
    /**
     *
     */
    public final static String appKey = "09ec30ececedeb92b6ba542b1cd0d641";

    private final static String REDIS_PREFIX = "bhdp-qx:";
    public int agespace = 5, heightspace = 10;
    /**
     *
     */
    public QianXianUsersRecommender() {
        super();
        this.userRelationSign = "recommend_qianxian_user";
    }



    /**
     * @param paras
     * @return
     */
    @Override
    public Map<String, Object> recommend(Map<String, String> paras) {
        RecommendAppRule appRule = this.getAppRule(appKey);
        Map<String, Object> resultMap = Maps.newHashMap();
        String profileUserId = paras.get("userID");
        int count = Integer.parseInt(paras.get("count"));
        Map<String, String> profileUserInfo = getUserInfoByUserId(profileUserId);
        List<String> recommedList = getRecordUserIDs(profileUserId);
        List<String> userIds_solr = Lists.newArrayList();
        getSearchResult(userIds_solr,  createFullQuery(profileUserInfo,profileUserId,getQueryPageSize(count,recommedList),appRule));
        List<String> resultList = removeDuplicate(userIds_solr, recommedList, count);
        this.processRecommendUsersRelations(appRule, profileUserId, resultList);
        this.duplicateRecommendUsersFromUserRelations(appRule, resultList, profileUserId);
        resultMap.put("qianxianUserIds", resultList);
        return resultMap;
    }

    private int getQueryPageSize(int count ,List<String> recommedList){
        return count + recommedList.size();
    }
    /**
     * @param appKey
     */
    @Override
    public void clearAppRuleCache(String appKey) {
        this.reloadAppRuleCache(appKey);
    }


    private BaiheQuery createFullQuery(Map<String, String> profileUserInfo,String profileUserId,int count,RecommendAppRule appRule) {
        String genderStr = profileUserInfo.get("gender");
        if (genderStr == null || genderStr.trim().length() < 1) {
            throw new RuntimeException("userId:" + profileUserId + " has no gender value!");
        }
        int gender = Integer.parseInt(genderStr);
        BaiheQuery query = new BaiheQuery();
        List<QueryItem> queryItems = Lists.newArrayList();
        query.setQueryItems(queryItems);
        query.setPageNum(1);
        query.setPageSize(count);
        query.setFls(Lists.newArrayList("userID"));
        query.setGender(gender);
        addQueryItems(queryItems, createAreaQueryItem(profileUserInfo));
        addQueryItems( queryItems,creatIntRangeQueryItem(profileUserInfo, "age", agespace));
        addQueryItems(queryItems, creatIntRangeQueryItem(profileUserInfo, "height", heightspace));
        query = this.makeBaiheQuery(query, appRule);
        LOGGER.debug(query.toString());
        return query;
    }

    private void addQueryItems(List<QueryItem> queryItems,QueryItem queryItem ){
        if(queryItem != null){
            queryItems.add(queryItem);
        }
    }

    private QueryItem createAreaQueryItem(Map<String, String> profileUserInfo){
        String cityStr = profileUserInfo.get("city");
        String countryStr = profileUserInfo.get("country");
        String districtStr = profileUserInfo.get("district");
        String provinceStr = profileUserInfo.get("province");
        int city = -1;
        int country = -1;
        int province = -1;
        int district = -1;
        if (cityStr != null && cityStr.trim().length() > 0) {
            city = Integer.parseInt(cityStr);
        }
        if (countryStr != null && countryStr.trim().length() > 0) {
            country = Integer.parseInt(countryStr);
        }

        if (provinceStr != null && provinceStr.trim().length() > 0) {
            province = Integer.parseInt(provinceStr);
        }
        if (districtStr != null && districtStr.trim().length() > 0) {
            district = Integer.parseInt(districtStr);
        }
        if (district > 0) {
            QueryItem queryItem = new QueryItem("district", Lists.newArrayList(String.valueOf(district)));
            return queryItem;
        } else {
            if (city > 0) {
                QueryItem queryItem = new QueryItem("city", Lists.newArrayList(String.valueOf(city)));
                return  queryItem;
            } else {
                if (province > 0) {
                    QueryItem queryItem = new QueryItem("province", Lists.newArrayList(String.valueOf(province)));
                    return  queryItem;
                }else if(country > 0){
                    QueryItem queryItem = new QueryItem("country", Lists.newArrayList(String.valueOf(province)));
                    return  queryItem;
                }
            }
        }
        return null;
    }

    private QueryItem creatIntRangeQueryItem(Map<String, String> profileUserInfo,String filed,int space){
        int value = -1;
        String filedStr = profileUserInfo.get(filed);
        if (filedStr != null && filedStr.trim().length() > 0) {
            value = Integer.parseInt(filedStr);
        }
        boolean ingore = false;
        if (value == -1) {
            ingore = true;
        }
        int hValue = value + space;
        int lValue = value - space;
        if (!ingore) {
            String valueRange = lValue + "#TO#" + hValue;
            QueryItem queryItem = new QueryItem(filed, Lists.newArrayList(valueRange));
           return queryItem;
        }
       return  null;
    }
    private void getSearchResult(List<String> userIds_solr, BaiheQuery query) {
        try {
            List<Map<String, Object>> finalQueryResults = queryService.processQuery(query);
            for (Map<String, Object> map : finalQueryResults) {
                String userID = String.valueOf(map.get("userID"));
                if (userID == null) {
                    continue;
                }
                userID = userID.replace(".", "").replaceAll("E[\\d]{0,}", "");
                userIds_solr.add(userID);
            }
        } catch (Exception e) {
            LOGGER.warn("query solr errors,  异常信息是：" + e.getMessage() + "");

        }
    }

    private List<String> removeDuplicate(List<String> userIds_solr, List<String> userIdsList, int count) {
        List<String> resultList = Lists.newArrayList();
        for (String userId : userIds_solr) {
            if (!userIdsList.contains(userId)) {
                resultList.add(userId);
            }
            if (resultList.size() == count) {
                break;
            }
        }
        return resultList;
    }

    private List<String> getRecordUserIDs(String profileUserId) {
        String k = REDIS_PREFIX + profileUserId;
        List<String> userIdsList = Lists.newArrayList();
        try {
            Set<ZSetOperations.TypedTuple<Set>> result = redisTemplate.opsForZSet().reverseRangeWithScores(k, 0, -1);
            for (ZSetOperations.TypedTuple tu : result) {
                userIdsList.add((String) tu.getValue());
            }
        } catch (Exception e) {
            LOGGER.warn("访问 Redis 服务器出现异常，" + e.getMessage() + "");
        }
        return userIdsList;
    }
}
